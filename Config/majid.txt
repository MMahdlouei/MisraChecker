Appendix A Summary of guidelines

Rule 8.4 Required
A compatible declaration shall be visible when an object or function
with external linkage is defined
    
Rule 12.1 Advisory
The precedence of operators within expressions should be made explicit
   
Rule 10.4 Required
Both operands of an operator in which the usual arithmetic conversions
are performed shall have the same essential type category

Rule 14.4 Required
The controlling expression of an if statement and the controlling
expression of an iteration-statement shall have essentially Boolean type

Rule 18.4 Advisory
The +, -, += and -= operators should not be applied to an expression of
pointer type

Rule 17.7 Required
The value returned by a function having non-void return type shall be
used


Rule 15.6 Required
The body of an iteration-statement or a selection-statement shall be a
compound-statement

            

Rule 2.7 Advisory
There should be no unused parameters in functions

Rule 3.1 Required
The character sequences /* and // shall not be used within a comment


Rule 9.2 Required
The initializer for an aggregate or union shall be enclosed in braces

Rule 9.3 Required
Arrays shall not be partially initialized


Rule 10.6 Required
The value of a composite expression shall not be assigned to an object
with wider essential type


Rule 17.8 Advisory
A function parameter should not be modified

Rule 16.4 Required
Every switch statement shall have a default label

Rule 15.7 Required
All if … else if constructs shall be terminated with an else statement

Rule 6.1 Required
Bit-fields shall only be declared with an appropriate type

Rule 12.3 Advisory
The comma operator should not be used

Rule 8.9 Advisory
An object should be defined at block scope if its identifier only appears
in a single function

Rule 16.7 Required
A switch-expression shall not have essentially Boolean type

Rule 15.5 Advisory 
A function should have a single point of exit at the end

Rule 10.3 Required
The value of an expression shall not be assigned to an object with a
narrower essential type or of a different essential type category

Rule 13.4 Advisory 
The result of an assignment operator should not be used

Rule 16.3 Required 
An unconditional break statement shall terminate every switch-clause

Rule 10.7 Required
If a composite expression is used as one operand of an operator in which
the usual arithmetic conversions are performed then the other operand
shall not have wider essential type

Rule 10.8 Required
The value of a composite expression shall not be cast to a different
essential type category or a wider essential type

Rule 7.2 Required
A “u” or “U” suffix shall be applied to all integer constants that are
represented in an unsigned type

Rule 10.1 Required
Operands shall not be of an inappropriate essential type